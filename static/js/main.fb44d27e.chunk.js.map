{"version":3,"sources":["componentes/Header.js","componentes/Formulario.js","componentes/Error.js","componentes/Clima.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","href","titulo","Formulario","ciudadRef","React","createRef","paisRef","buscarClima","e","preventDefault","respuesta","ciudad","_this","current","value","pais","datosConsulta","onSubmit","this","id","ref","type","htmlFor","defaultValue","Component","Error","mensaje","Clima","mostrarResultado","_this$props$resultado","resultado","name","weather","main","urlIcono","concat","icon","alt","temp","toFixed","src","temp_max","temp_min","console","log","App","state","error","consulta","consultarApi","_this$state$consulta","url","fetch","then","json","datos","setState","catch","prevProps","prevState","cod","componentes_Error","componentes_Clima","componentes_Header","componentes_Formulario","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fb44d27e.chunk.js","sourcesContent":["//imr para agregar rapidamente gracias a la extencion\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\n//rsc\r\nconst Header = (props) => {\r\n    return (\r\n        <div>\r\n            <nav>\r\n                <div className=\"new-wrapper light-blue darken-2\">\r\n                        <a href=\"%PUBLIC_URL%/manifest.json\"  className=\"brand-logo\">{props.titulo}</a>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nHeader.propTypes ={\r\n    titulo: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Formulario extends Component {\r\n\r\n    //crear los refs \r\n    ciudadRef = React.createRef();\r\n    paisRef = React.createRef();\r\n\r\n    buscarClima=(e)=>{\r\n        e.preventDefault();\r\n\r\n        //leer los refs y crear el objeto \r\n        const respuesta = {\r\n           ciudad: this.ciudadRef.current.value,\r\n           pais: this.paisRef.current.value\r\n\r\n        }\r\n        //enviar por props\r\n        this.props.datosConsulta(respuesta);\r\n\r\n\r\n        //opcionalñ resetear el  form \r\n    }\r\n\r\n    render() { \r\n        return (  \r\n               <div className=\"contenedor-form\">\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <form onSubmit={this.buscarClima}>\r\n                                 <div className=\"input-field col s12 m8 14 offSet-m2\">\r\n                                   <input id=\"ciudad\" ref={this.ciudadRef} type=\"text\"/>\r\n                                   <label htmlFor=\"ciudad\">Ciudad:</label>\r\n\r\n                                 </div>\r\n\r\n                                 <div className=\"input-field col s12 m8 14 offSet-m2\">\r\n                                    <select ref={this.paisRef}>\r\n                                        <option value=\"\" defaultValue>Elige un pais </option>\r\n                                        <option value=\"AR\">Argentina</option>\r\n                                        <option value=\"CO\">Columbia</option>\r\n                                        <option value=\"CR\">Costa Rica</option>\r\n                                        <option value=\"ES\">España</option>\r\n                                        <option value=\"US\">Estados Unidos</option>\r\n                                        <option value=\"MX\">Mexico</option>\r\n                                        <option value=\"PU\">Pero</option>\r\n                                    </select>\r\n                                    <label htmlFor=\"pais\">Pais:</label>\r\n                                </div>\r\n\r\n                                <div className=\"input-field col s12 m8 14 offSet-2 buscador\">\r\n                                    <input type=\"submit\" className=\"waves-effect waves-light btn-large yellow \r\n                                    accent-4\" value=\"Buscar.....\"/>\r\n                                 </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n               </div>\r\n        );\r\n    }\r\n}\r\n \r\n\r\nFormulario.propTypes ={\r\n    datosConsulta: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Formulario;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Error = (props) => {\r\n    return (  \r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col s12 m6 offset-m3\">\r\n                    <div className=\"card-panel red darken-4 error\">\r\n                        {props.mensaje}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nError.propTypes ={\r\n    mensaje: PropTypes.string.isRequired\r\n}\r\nexport default Error;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Clima extends Component {\r\nmostrarResultado=()=>{\r\n//obtener los datos de la consulta \r\n    const {name,weather,main} = this.props.resultado;\r\n    if(!name || !weather || !main) return null;\r\n\r\n    const kelvin =273.15;\r\n    const urlIcono =`http://openweathermap.org/img/w/${weather[0].icon}.png`\r\n    const alt = `clima de ${name}`\r\n    return(\r\n        <div className=\"row\">\r\n            <div className=\"resultado col s12 m8 16 offset-m2 offset-l3\">\r\n                <div className=\"card-panel light-blue align-center\">\r\n                    <span className=\"white-text\">\r\n                        <h2>Resultado Clima de :{name}</h2>\r\n                        <p className=\"temperatura\">\r\n                            Actual: {(main.temp - kelvin).toFixed(2)}&deg;C\r\n                            <img src={urlIcono} alt={alt} />\r\n                        </p>\r\n                        <p>Max. {(main.temp_max - kelvin).toFixed(2)}&deg;C</p>\r\n                        <p>Min. {(main.temp_min - kelvin).toFixed(2)}&deg;C</p>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n     )\r\n}\r\n\r\n    render() { \r\n\r\n        console.log(this.props.resultado);\r\n        return (  \r\n                <div className =\"container\">\r\n                        {this.mostrarResultado()}\r\n                </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nClima.propTypes ={\r\n    resultado: PropTypes.object.isRequired\r\n}\r\nexport default Clima;","import React, { Component } from 'react';\nimport Header from './componentes/Header';\nimport Formulario from  './componentes/Formulario';\nimport Error from './componentes/Error';\nimport Clima from './componentes/Clima';\n\n \n\nclass App extends Component {\n  \n  state ={\n    error: '',\n    consulta : {},\n    resultado: {}\n  }\ncomponentDidUpdate(prevProps,prevState){\n  if(prevState.consulta !== this.state.consulta){\n    this.consultarApi()\n  }\n}\n\n  componentDidMount(){\n    this.setState({\n      error : false\n    })\n  }\n\n  consultarApi =()=>{\n    const {ciudad,pais} = this.state.consulta;\n    if(!ciudad || !pais) return null;\n\n      //leer la url y agregar el API key\n    const appid = '8e6eb6e4485432a4301c6ae1225c578c';\n    let url = `https://api.openweathermap.org/data/2.5/weather?q=${ciudad},${pais}&appid=${appid}`;\n\n    //query con fetch api -- consultar el api\n    fetch(url)\n    .then(respuesta => {\n        return respuesta.json();\n    } )\n    .then(datos => {\n      this.setState({\n        resultado : datos\n      })\n    })\n    .catch(error =>{\n      console.log(error)\n    })\n    \n  }\n\n  datosConsulta = (respuesta) => {\n    if(respuesta.ciudad === '' || respuesta.pais ==='' ){\n      this.setState({\n        error : true\n      })\n    }else{\n      this.setState({\n        consulta : respuesta,\n        error : false\n      })\n    }\n  }\n\n  render() {\n\n    const {error} = this.state,\n    {cod} = this.state.resultado;\n    \n    let resultado;\n    if(error){\n        resultado = <Error mensaje= \"Ambos campos son obligatorios\"/>\n    }else if(cod===\"404\"){\n      resultado = <Error mensaje= \"Ciudad no encontrada\"/>\n    }else {\n      resultado = <Clima resultado = {this.state.resultado}/>\n\n    }\n\n    return (\n      <div className=\"app\">\n        <Header  titulo=\"Clima react\" />\n        \n        <Formulario\n          datosConsulta= {this.datosConsulta}\n        />\n\n        {resultado}\n\n\n      </div>\n\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}